package app.server;

import java.io.*;
import java.net.*;

import app.GUI.Pages.MainPage;
import shared.SimpleMessage;
 
/**
 * This thread handles connection for each connected client, so the server
 * can handle multiple clients at the same time.
 * 
 * Note that each 'client' is a unique username+group combination.
 * Therefore, a user in 4 groupchats will have 4 client connections.
 *
 * @author www.codejava.net
 * @author Adapted by Sean McNamee
 */
public class UserThread extends Thread {
    private Socket socket;
    private String username, group; //The unique identifier for a thread
    private ChatServer server; //Because it has to broadcast messages to everyone

    private final String SERVER_INFO = "SERVER";
    private final String USER_MESSAGE = "USER";

    private ObjectOutputStream writer;

    //TODO deal with securely closing sockets better?
    //This isn't even triggered. Should the client just send this when their application is closed?
    //Should this be generated by the client and sent here along with the username and group?
    private static String ENDING_STRING = "fjkdsafueiwfjdsafuernavahkfjdsa";
    private MainPage guiPage;
 
    public UserThread(MainPage guiPage, Socket socket, ChatServer server) {
        this.socket = socket;
        this.server = server;
        this.guiPage = guiPage;
    }
 
    /**
     * Initializes reader and writer. Recieves identifier information (username/group)
     * Waits for input from the socket so it can be broadcasted.
     */
    public void run() {
        try {
            OutputStream output = socket.getOutputStream();
            writer = new ObjectOutputStream(output);
            
            InputStream input = socket.getInputStream();
            ObjectInputStream reader = new ObjectInputStream(input);
 
            try {
                SimpleMessage userName = (SimpleMessage) reader.readObject();
                SimpleMessage groupName = (SimpleMessage) reader.readObject();
                this.username = userName.getSomeMessage();
                this.group = groupName.getSomeMessage();
            } catch (ClassNotFoundException e) {
                System.out.println("Handshake failed");
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            

            printUsers();
            
 
            String serverMessage = "New user connected to " + group + ": " + username;
            guiPage.addConnection(serverMessage);


            server.broadcast(SERVER_INFO + serverMessage, this);
 
            SimpleMessage clientMessage = null;
            
            //Broadcast any recieved message. Note the variable names
            do {
                try {
                    clientMessage = (SimpleMessage) reader.readObject();
                    serverMessage = clientMessage.getSomeMessage() + " -- " + clientMessage.getSomeNum();
                } catch (ClassNotFoundException e) {
                    serverMessage = "Failed to reader client message";
                    e.printStackTrace();
                } //In from the client
                
                guiPage.addBroadcast(serverMessage);
                server.broadcast(USER_MESSAGE + serverMessage, this); //Out from the server
 
            } while (!clientMessage.equals(ENDING_STRING));
 
            server.removeUser(this);
            socket.close();
 
            serverMessage = username + " has quitted.";
            guiPage.addConnection(serverMessage);
            server.broadcast(SERVER_INFO + serverMessage, this);
 
        } catch (IOException ex) {
            System.out.println("Error in UserThread: " + ex.getMessage());
            guiPage.addConnection("'Error' in UserThread (Disconnected/quit): " + ex.getMessage());
            ex.printStackTrace();
        }
    }
 
    /**
     * Sends a messaged baesd on if other users are connected
     * 
     * TODO send a list of online users to the newly connected user.
     * We can send over other data types as well (character array buffers)
     */
    void printUsers() {
        if (server.hasUsers()) {
            sendMessage(SERVER_INFO + "Welcome to " + group);
        } else {
            sendMessage(SERVER_INFO + "No other users connected");
        }
    }

    /**
     * Sends a message to the client.
     */
    void sendMessage(String message) {
        try {
            writer.writeObject(new SimpleMessage(-1, message));
        } catch (IOException e) {
            guiPage.addConnection("Failed to send message: " + message);
            e.printStackTrace();
        }
    }

    public String getUserName() {
        return username;
    }

    public void setUserName(String name) {
        this.username = name;
    }

    public String getGroup() {
        return group;
    }

    public void setGroup(String group) {
        this.group = group;
    }

    
}